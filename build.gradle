plugins {
    id 'application'
    id 'distribution'
    id 'jacoco'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'io.freefair.lombok' version '4.0.1'
    id 'com.github.hierynomus.license-report' version '0.15.0'
    id 'com.github.spotbugs' version '2.0.0'
    id 'net.researchgate.release' version '2.6.0'
    id 'org.beryx.runtime' version '1.3.0'
}

// Add -PSpotBugs=true to the Gradle Command Line to run spotbugs.
String value = project.getProperties().get('SpotBugs')
boolean SpotBugs = Boolean.parseBoolean(value) ?: true

String javafxVersion = "11.0.2"

allprojects {
    group = 'com.github.schwabdidier'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url = 'https://jitpack.io'
        }

        maven {
            url = 'https://raw.github.com/agomezmoron/screen-recorder/mvn-repo'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.hierynomus.license-report'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'distribution'

    javafx {
        version = javafxVersion
        modules = [ 'javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web' ]
    }

    spotbugs {
        toolVersion = '4.0.0-beta3'

        //ignoreFailures = false
        //effort = "max"
        //reportLevel = "high"
        excludeFilter = file("spotbugs-exclude.xml")
    }

    spotbugsMain.enabled = SpotBugs
    spotbugsTest.enabled = SpotBugs

    downloadLicenses {
        dependencyConfiguration = 'compileClasspath'
        includeProjectDependencies = true
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
        testImplementation "org.testfx:testfx-core:4.0.16-alpha"
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
        testImplementation "org.testfx:openjfx-monocle:jdk-11+26"
    }

    sourceCompatibility = '11'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    tasks.jacocoTestReport.dependsOn('test')
}

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gazeplay-dist/build.gradle"

dependencies {
    runtime project(':gazeplay')
    
    runtime project(':gazeplay-games')
    runtime project(':gazeplay-games-commons')
    runtime project(':gazeplay-commons')
    runtime project(':gazeplay-melordi')
    runtime project(':gazeplay-picto-pick')

    implementation 'javax.servlet:javax.servlet-api:4.0.1'
}

distributions {
    main {
        contents {
            from("build/reports")
            from("build/scripts") {
                into 'bin'
            }
            from("gazeplay/src/main/resources")
            from("gazeplay-dist/src/jre") {
                into 'lib/jre'
            }
        }
    }
}

jar {
    manifest {
        attributes (
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'net.gazeplay.GazePlayLauncher',
                "Class-Path": configurations.runtime.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

runtime {
    options = ['--compress', '2', '--no-header-files', '--no-man-pages']
    modules = jreModules
    jreDir = file("gazeplay-dist/src/jre")
}

task cleanJre(type: Delete) {
    delete 'gazeplay-dist/src/jre'
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded =  false
    versionPropertyFile = 'release.properties'
}

mainClassName = 'net.gazeplay.GazePlayLauncher'

defaultTasks 'clean', 'build'
startScripts.enabled = false
