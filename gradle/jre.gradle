String.metaClass.encodeURL = {
    java.net.URLEncoder.encode(delegate, "UTF-8")
}

def jdkSource = 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download'
def jdkVersion = '11.0.6_10'
def jdkTag = jdkVersion.replace('_', '+').encodeURL()
def jdkFolder = "jdk-${jdkVersion.replace('_', '+')}"

runtime {
    options = ['--compress', '2', '--no-header-files', '--no-man-pages']
    modules = jreModules
    jreDir = file("${buildDir}/jre")

    targetPlatform('linux', "${buildDir}/jre/linux/${jdkFolder}")
    targetPlatform('windows', "${buildDir}/jre/windows/${jdkFolder}")
    targetPlatform('macos', "${buildDir}/jre/macos/${jdkFolder}")
}

task downloadLinuxJDK(type: Download) {
    src "${jdkSource}/jdk-${jdkTag}/OpenJDK11U-jdk_x64_linux_hotspot_${jdkVersion}.tar.gz"
    dest new File("${buildDir}/jre", 'linux.tar.gz')
}

task downloadAndExtractLinuxJDK(dependsOn: downloadLinuxJDK, type: Copy) {
    from tarTree(downloadLinuxJDK.dest)
    into "${buildDir}/jre/linux"
}

task downloadWindowsJDK(type: Download) {
    src "${jdkSource}/jdk-${jdkTag}/OpenJDK11U-jdk_x64_windows_hotspot_${jdkVersion}.zip"
    dest new File("${buildDir}/jre", 'windows.zip')
    overwrite false
}

task downloadAndExtractWindowsJDK(dependsOn: downloadWindowsJDK, type: Copy) {
    from zipTree(downloadWindowsJDK.dest)
    into "${buildDir}/jre/windows"
}

task downloadMacJDK(type: Download) {
    src "${jdkSource}/jdk-${jdkTag}/OpenJDK11U-jdk_x64_mac_hotspot_${jdkVersion}.tar.gz"
    dest new File("${buildDir}/jre", 'macos.tar.gz')
    overwrite false
}

task downloadAndExtractMacosJDK(dependsOn: downloadMacJDK, type: Copy) {
    from tarTree(downloadMacJDK.dest)
    into "${buildDir}/jre/macos"
}

task downloadAndExtractJDKs(dependsOn: [downloadAndExtractLinuxJDK, downloadAndExtractWindowsJDK, downloadAndExtractMacosJDK]) {}

jre.dependsOn(downloadAndExtractJDKs)

task cleanJre(type: Delete) {
    delete 'gazeplay-dist/src/jre'
}
