pmdMain.group = 'verification'
pmdTest.group = 'verification'

def gazeplayViolationThresholds = [
        1: 2,
        2: 0,
        3: 0,
        4: 0,
        5: 0
]

def gazeplayCommonsViolationThresholds = [
        1: 20,
        2: 6,
        3: 0,
        4: 0,
        5: 0
]

def gazeplayGamesViolationThresholds = [
        1: 37,
        2: 2,
        3: 0,
        4: 0,
        5: 0
]

task checkPMDReport(dependsOn: 'pmdMain', group: 'verification') {
    doLast {
        def pmdReportXml = file("$project.buildDir/reports/pmd/main.xml")
        if (pmdReportXml.exists()) {
            def pmdReportHtml = file("$project.buildDir/reports/pmd/main.html")
            def rootNode = new XmlSlurper().parse("$pmdReportXml")
            // thresholds are set from actual observations of the number of violation
            // goal is that no new violations come in the code base
            // as we progressively fix existing violations (or exclude them in pmd-ruleset.xml), we should lower the threshold accordingly
            // until the threshold is zero
            def violationsThresholds

            switch(project.name) {
                case 'gazeplay':
                    violationsThresholds = gazeplayViolationThresholds
                    break
                case 'gazeplay-commons':
                    violationsThresholds = gazeplayCommonsViolationThresholds
                    break
                case 'gazeplay-games':
                    violationsThresholds = gazeplayGamesViolationThresholds
                    break
                default:
                    violationsThresholds = [
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            5: 0
                    ]
            }

            violationsThresholds.each {
                priorityLevel, violationsThreshold ->

                    def violationsCount = rootNode.children().children().findAll({ node -> node.name() == 'violation' && node.@priority == priorityLevel }).size()
                    def violationsMessage = "$violationsCount PMD rule 'priority $priorityLevel' violations were found. See the report at: file://$pmdReportHtml"
                    if (violationsCount > violationsThreshold) {
                        throw new GradleException(violationsMessage)
                    } else {
                        if (violationsCount > 0) {
                            println violationsMessage
                        }
                    }
            }
        }
    }
}
