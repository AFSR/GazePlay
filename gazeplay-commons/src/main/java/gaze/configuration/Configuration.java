package gaze.configuration;

import gaze.EyeTrackers;
import lombok.Data;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import utils.games.Utils;

import java.io.*;
import java.util.Properties;

/**
 * Created by schwab on 24/10/2016.
 */
@ToString
@Slf4j
@Data
public class Configuration {

    private static String PROPERTY_NAME_GAZEMODE = "GAZEMODE";
    private static String PROPERTY_NAME_EYETRACKER = "EYETRACKER";
    private static String PROPERTY_NAME_LANGUAGE = "LANGUAGE";
    private static String PROPERTY_NAME_FILEDIR = "FILEDIR";
    private static String PROPERTY_NAME_FIXATIONLENGTH = "FIXATIONLENGTH";
    private static String PROPERTY_NAME_CSSFILE = "CSSFILE";
    private static String PROPERTY_NAME_WHEREISIT_DIR = "WHEREISITDIR";

    private static String CONFIGPATH = Utils.getGazePlayFolder() + "GazePlay.properties";

    private static String DEFAULT_VALUE_GAZEMODE = "true";
    private static String DEFAULT_VALUE_EYETRACKER = EyeTrackers.mouse_control.toString();
    private static String DEFAULT_VALUE_LANGUAGE = "fra";
    private static int DEFAULT_VALUE_FIXATION_LENGTH = 500;
    private static String DEFAULT_VALUE_CSS_FILE = "data/stylesheets/main-green.css";
    private static String DEFAULT_VALUE_WHEREISIT_DIR = "";

    private static String getFileDirectoryDefaultValue() {
        return Utils.getGazePlayFolder() + "files" + Utils.FILESEPARATOR;
    }

    private static Properties loadProperties(String propertiesFilePath) throws IOException {
        try (InputStream inputStream = new FileInputStream(propertiesFilePath)) {
            final Properties properties = new Properties();
            properties.load(inputStream);
            return properties;
        }
    }

    public String gazeMode = DEFAULT_VALUE_GAZEMODE;

    public String eyetracker = DEFAULT_VALUE_EYETRACKER;

    public String language = DEFAULT_VALUE_LANGUAGE;

    public String filedir = getFileDirectoryDefaultValue();

    public int fixationlength = DEFAULT_VALUE_FIXATION_LENGTH;

    public String cssfile = DEFAULT_VALUE_CSS_FILE;

    public String whereIsItDir = DEFAULT_VALUE_WHEREISIT_DIR;

    public Configuration() {
        Properties properties;
        try {
            properties = loadProperties(CONFIGPATH);
        } catch (FileNotFoundException e) {
            log.warn("Config file not found : {}", CONFIGPATH);
            properties = null;
        } catch (IOException e) {
            log.error("Failure while loading config file {}", CONFIGPATH, e);
            properties = null;
        }
        if (properties != null) {
            log.info("Properties loaded : {}", properties);
            populateFromProperties(properties);
        }
    }

    public Configuration(String eyetracker, String language) {
        this.eyetracker = eyetracker;
        this.language = language;
    }

    public Configuration(String eyetracker) {
        this.eyetracker = eyetracker;
    }

    public void populateFromProperties(Properties prop) {
        String buffer;

        buffer = prop.getProperty(PROPERTY_NAME_GAZEMODE);
        if (buffer != null) {
            gazeMode = buffer.toLowerCase();
        }

        buffer = prop.getProperty(PROPERTY_NAME_EYETRACKER);
        if (buffer != null) {
            eyetracker = buffer;
        }

        buffer = prop.getProperty(PROPERTY_NAME_LANGUAGE);
        if (buffer != null) {
            language = buffer.toLowerCase();
        }

        buffer = prop.getProperty(PROPERTY_NAME_FILEDIR);
        if (buffer != null) {
            filedir = buffer;
        }

        buffer = prop.getProperty(PROPERTY_NAME_FIXATIONLENGTH);
        if (buffer != null) {
            try {
                fixationlength = Integer.parseInt(buffer);
            } catch (NumberFormatException e) {
                log.warn("NumberFormatException while parsing value '{}' for property {}", buffer,
                        PROPERTY_NAME_FIXATIONLENGTH);
            }
        }

        buffer = prop.getProperty(PROPERTY_NAME_CSSFILE);
        if (buffer != null) {
            cssfile = buffer;
        }

        buffer = prop.getProperty(PROPERTY_NAME_WHEREISIT_DIR);
        if (buffer != null) {
            whereIsItDir = buffer.toLowerCase();
        }
    }

    public void saveConfig() throws IOException {
        Properties properties = toProperties();
        try (FileOutputStream fileOutputStream = new FileOutputStream(new File(CONFIGPATH))) {
            String fileComment = "Automatically generated by GazePlay";
            properties.store(fileOutputStream, fileComment);
        }
        log.info("Properties saved : {}", properties);
    }

    public void saveConfigIgnoringExceptions() {
        try {
            saveConfig();
        } catch (IOException e) {
            log.error("Exception while writing configuration to file {}", CONFIGPATH, e);
        }
    }

    private Properties toProperties() {
        Properties properties = new Properties();

        // FIXME why is this not saved to file ? -> Certainly no longer usefull (see issue #102)
        // properties.setProperty(PROPERTY_NAME_GAZEMODE, this.gazeMode);

        properties.setProperty(PROPERTY_NAME_EYETRACKER, this.eyetracker);
        properties.setProperty(PROPERTY_NAME_LANGUAGE, this.language);
        properties.setProperty(PROPERTY_NAME_FILEDIR, this.filedir);
        properties.setProperty(PROPERTY_NAME_FIXATIONLENGTH, Integer.toString(this.fixationlength));
        properties.setProperty(PROPERTY_NAME_CSSFILE, this.cssfile);
        properties.setProperty(PROPERTY_NAME_WHEREISIT_DIR, this.whereIsItDir);

        return properties;
    }

}
